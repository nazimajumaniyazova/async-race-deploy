(()=>{"use strict";var e={288:(e,t,n)=>{n.r(t)},607:function(e,t,n){var i=this&&this.__createBinding||(Object.create?function(e,t,n,i){void 0===i&&(i=n),Object.defineProperty(e,i,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,i){void 0===i&&(i=n),e[i]=t[n]}),o=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),r=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&i(t,e,n);return o(t,e),t},a=this&&this.__awaiter||function(e,t,n,i){return new(n||(n=Promise))((function(o,r){function a(e){try{s(i.next(e))}catch(e){r(e)}}function c(e){try{s(i.throw(e))}catch(e){r(e)}}function s(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,c)}s((i=i.apply(e,t||[])).next())}))},c=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),n(288);const s=r(n(562)),d=c(n(186)),l=["Audi","BMW","Citroen","Fiat","Ford","Honda","Hyundai","Jaguar","Kia","Mazda","Mersedes","Mini","Mitsubishi","Peugeot","Pontiac","Porsche","Suzuki","Tesla","Volkswagen","Volvo"],u=document.querySelector(".garage"),v=document.querySelector(".winners"),f=document.querySelector(".menu"),p=document.querySelectorAll(".menu__item"),h=document.querySelector(".winners-list");let m=[],y=[];null==f||f.addEventListener("click",(e=>a(void 0,void 0,void 0,(function*(){const t=e.target,n=null==t?void 0:t.dataset.target;"garage"===n&&(null==u||u.classList.add("show"),null==v||v.classList.remove("show")),"winners"===n&&(null==v||v.classList.add("show"),null==u||u.classList.remove("show"),yield function(){return a(this,void 0,void 0,(function*(){h.innerHTML="",(yield k()).map(((e,t)=>a(this,void 0,void 0,(function*(){const n=yield A(e.id),i=(0,s.createWinnerBox)(n.name,n.color,e.id,e.time,e.wins,t+1);return h.insertAdjacentHTML("beforeend",i),""}))))}))}()),p.forEach((e=>{e.classList.remove("active")})),t.classList.add("active")}))));const _=document.querySelector(".create-btn"),b=document.querySelector(".create-car__color"),g=document.querySelector(".create-car__name"),L=document.querySelector(".create-car__brands"),w=document.querySelector(".pagination__current"),S=document.querySelector(".pagination__total"),M=document.querySelector(".pagination-btn"),T=document.querySelector(".race-btn"),q=document.querySelectorAll(".btn");let $;const x=document.querySelector(".reset-btn");function j(e){return a(this,void 0,void 0,(function*(){let t;const n=yield fetch("http://127.0.0.1:3000/garage",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)});return t=(yield n.json()).id,t}))}function H(e){return a(this,void 0,void 0,(function*(){let t="http://127.0.0.1:3000/garage";e&&(t+=`/${e}`);const n=yield fetch(t,{method:"GET",headers:{"Content-Type":"application/json"}});return yield n.json()}))}function A(e){return a(this,void 0,void 0,(function*(){const t=yield fetch(`http://127.0.0.1:3000/garage/${e}`,{method:"GET",headers:{"Content-Type":"application/json"}});return yield t.json()}))}function E(e,t){return a(this,void 0,void 0,(function*(){const n=yield fetch(`http://127.0.0.1:3000/engine?id=${e}&status=${t}`,{method:"PATCH"});return yield n.json()}))}function P(e){return a(this,void 0,void 0,(function*(){const t=yield fetch(`http://127.0.0.1:3000/engine?id=${e}&status=drive`,{method:"PATCH"}).catch();return 200!==t.status?{success:!1}:yield t.json()}))}function k(){return a(this,void 0,void 0,(function*(){const e=yield fetch("http://127.0.0.1:3000/winners/",{method:"GET",headers:{"Content-Type":"application/json"}});return yield e.json()}))}x.disabled=!0,_.addEventListener("click",(()=>a(void 0,void 0,void 0,(function*(){const e={name:`${L.value} ${g.value}`,color:b.value};L.value="Audi",g.value="",yield j(e),G(+w.innerHTML).then((e=>{F(e)})),J(),D()}))));const O=document.querySelector(".garage__cars");function C(e,t,n,i){let o=null;const r=e;let c;c=window.requestAnimationFrame((function s(d){var l,u;o||(o=d);const v=d-o,f=Math.round(v*(n/i));if(r.style.transform=`translateX(${Math.min(f,n)}px`,f<n)c=window.requestAnimationFrame(s),m[t]={id:c};else{if(T.classList.contains("active")){const n=`<p class="winner-message">Wins: ${null===(l=y[t].querySelector(".car__box-name"))||void 0===l?void 0:l.innerHTML} in ${i/1e3}s</p>`;null===(u=e.closest(".car__box"))||void 0===u||u.insertAdjacentHTML("beforeend",n),T.classList.remove("active"),x.disabled=!1,function(e,t){a(this,void 0,void 0,(function*(){const n=t/1e3;if(500===(yield function(e){return a(this,void 0,void 0,(function*(){return yield fetch("http://127.0.0.1:3000/winners",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)})}))}({id:e,wins:1,time:n})).status){const n=yield function(e){return a(this,void 0,void 0,(function*(){let t=`http://127.0.0.1:3000/winners/${e}`;const n=yield fetch(t,{method:"GET",headers:{"Content-Type":"application/json"}});return yield n.json()}))}(e),i=n.wins+1,o=n.time;yield function(e,t,n){return a(this,void 0,void 0,(function*(){let i={wins:t,time:n};return yield fetch(`http://127.0.0.1:3000/winners/${e}`,{method:"PUT",headers:{"Content-Type":"application/json"},body:JSON.stringify(i)})}))}(e,i,Math.min(t,o))}}))}(t,i)}window.cancelAnimationFrame(m[t].id)}})),m[t]={id:c}}function F(e){O.innerHTML="",y=[],e.map((e=>{const t=(0,s.default)(e.name,e.color,e.id);return O.insertAdjacentHTML("beforeend",t),y[e.id]=O.querySelector(`[data-id="${e.id}"]`),""})),$=O.querySelectorAll(".btn")}function W(e){return Math.floor(Math.random()*e)+1}O.addEventListener("click",(e=>a(void 0,void 0,void 0,(function*(){var t;const n=null==e?void 0:e.target,i=n.closest(".car__box"),o=i.querySelector(".edit-car"),r=null==i?void 0:i.getAttribute("data-id"),c=null==i?void 0:i.querySelectorAll(".btn"),s=i.querySelector(".car__box__stop");let d=i.querySelector(".car-img");n.classList.contains("car__box__remove")&&(function(e){fetch(`http://127.0.0.1:3000/garage/${e}`,{method:"DELETE"})}(+r),yield function(e){return a(this,void 0,void 0,(function*(){fetch(`http://127.0.0.1:3000/winners/${e}`,{method:"DELETE"})}))}(+r),null==i||i.remove(),J(),G(+w.innerHTML).then((e=>{F(e)}))),n.classList.contains("car__box__edit")&&(o.classList.remove("show"),o.classList.add("show")),n.classList.contains("update-btn")&&function(e){const t=null==e?void 0:e.querySelector(".create-car__brands"),n=null==e?void 0:e.querySelector(".create-car__name"),i=null==e?void 0:e.querySelector(".create-car__color"),o=e.querySelector(".edit-car"),r={name:`${t.value} ${n.value}`,color:i.value};t.value="Audi",n.value="",function(e,t){fetch(`http://127.0.0.1:3000/garage/${e}`,{method:"PUT",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)})}(+(null==e?void 0:e.getAttribute("data-id")),r),o.classList.remove("show"),o.classList.add("hide"),function(e,t,n){const i=e.querySelector(".car__box-name"),o=e.querySelector(".car-img");i.innerHTML=t,o.style.backgroundColor=n}(e,r.name,r.color)}(i),n.classList.contains("car__box__start")&&(c.forEach((e=>{e.disabled=!0})),s.disabled=!1,C(d,+r,(null===(t=i.querySelector(".car__path-line"))||void 0===t?void 0:t.offsetWidth)-50,yield N(+r)),(yield P(+r)).success||window.cancelAnimationFrame(m[+r].id)),n.classList.contains("car__box__stop")&&(window.cancelAnimationFrame(m[+r].id),d.style.transform="translateX(0)",c.forEach((e=>{e.disabled=!1})),yield E(+r,"stopped"))})))),document.querySelector(".add-cars").addEventListener("click",(()=>{for(let e=0;e<100;e+=1){const e=W(l.length-1),t=W(d.default.length),n=Math.floor(16777215*Math.random()).toString(16);j({name:`${l[e]} ${d.default[t]}`,color:`#${n}`})}G(+w.innerHTML).then((e=>{F(e)})),J(),D()}));const B=document.querySelector(".cars-amount__num");function J(){H().then((e=>{B.innerHTML=`${e.length}`}))}J();const z=document.querySelector(".btn-prev");z.classList.add("non-active");const V=document.querySelector(".btn-next");function D(){H().then((e=>{S.innerHTML=`${Math.floor(e.length/7)+1}`}))}function G(e,t){return a(this,void 0,void 0,(function*(){let t;const n=yield H();let i=7*(e-1);return t=n.slice(i,i+7),t}))}function N(e){return a(this,void 0,void 0,(function*(){let t,n,i;const o=yield E(e,"started");return t=o.velocity,n=o.distance,i=Math.round(n/t),i}))}M.addEventListener("click",(e=>a(void 0,void 0,void 0,(function*(){let t=e.target;S.innerHTML;let n=+w.innerHTML;if(t.classList.contains("btn-prev")){if(V.classList.contains("non-active")&&V.classList.remove("non-active"),n<=1)return void z.classList.add("non-active");n-=1,1===n&&z.classList.add("non-active"),G(+n).then((e=>{F(e)})),m=[],w.innerHTML=`${n}`}if(t.classList.contains("btn-next")){if(z.classList.contains("non-active")&&z.classList.remove("non-active"),n+=1,n>+S.innerHTML)return void V.classList.add("non-active");n===+S.innerHTML&&V.classList.add("non-active"),G(+n).then((e=>{F(e)})),m=[],w.innerHTML=`${n}`}})))),D(),window.addEventListener("load",(()=>{G(+w.innerHTML).then((e=>{F(e)}))})),T.addEventListener("click",(()=>{T.classList.add("active"),q.forEach((e=>{e.disabled=!0})),$.forEach((e=>{e.disabled=!0})),function(){a(this,void 0,void 0,(function*(){y.map((e=>a(this,void 0,void 0,(function*(){var t;const n=(null===(t=e.querySelector(".car__path-line"))||void 0===t?void 0:t.offsetWidth)-50,i=e.querySelector(".car-img"),o=e.getAttribute("data-id");return C(i,+o,n,yield N(+o)),(yield P(+o)).success||(window.cancelAnimationFrame(m[+o].id),m[+o].id=0),""}))))}))}()})),x.addEventListener("click",(()=>{var e;y.map((e=>a(void 0,void 0,void 0,(function*(){const t=e.querySelector(".car-img"),n=e.getAttribute("data-id");window.cancelAnimationFrame(m[+n].id),t.style.transform="translateX(0)",yield E(+n,"stopped")})))),null===(e=document.querySelector(".winner-message"))||void 0===e||e.remove(),q.forEach((e=>{e.disabled=!1})),$.forEach((e=>{e.disabled=!1})),x.disabled=!0}));let K="as",X="as";const U=document.querySelector(".sort-wins"),I=document.querySelector(".sort-time");function Q(e,t){return e.wins-t.wins}function R(e,t){return t.wins-e.wins}function Y(e,t){return e.time-t.time}function Z(e,t){return t.time-e.time}U.addEventListener("click",(()=>a(void 0,void 0,void 0,(function*(){let e=yield k();"as"===X?(e.sort(Q),X="desc"):(e.sort(R),X="as"),h.innerHTML="",e.map(((e,t)=>a(void 0,void 0,void 0,(function*(){const n=yield A(e.id),i=(0,s.createWinnerBox)(n.name,n.color,e.id,e.time,e.wins,t+1);return h.insertAdjacentHTML("beforeend",i),""}))))})))),I.addEventListener("click",(()=>a(void 0,void 0,void 0,(function*(){let e=yield k();"as"===K?(e.sort(Y),K="desc"):(e.sort(Z),K="as"),h.innerHTML="",e.map(((e,t)=>a(void 0,void 0,void 0,(function*(){const n=yield A(e.id),i=(0,s.createWinnerBox)(n.name,n.color,e.id,e.time,e.wins,t+1);return h.insertAdjacentHTML("beforeend",i),""}))))}))))},186:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=["magical","empower","scar","wave","wound","society","puffy","youthful","jagged","milky","screw","unaccountable","mitten","clumsy","suppose","respect","mix","heavenly","banish"]},562:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.createWinnerBox=void 0,t.default=function(e,t,n){return` <div class="car__box winner" data-id = "${n}">\n  <div class="car__settings">\n    <div class="car__settings-left">\n      <button class="btn car__box__remove">🗙</button>\n      <button class="btn car__box__edit">✎</button>\n      <div class="car__box-name">${e} ${n}</div>\n      <div class="edit-car hide">\n        <select class="create-car__brands">\n          <option value="Audi">Audi</option>\n          <option value="BMW">BMW</option>\n          <option value="Citroen">Citroen</option>\n          <option value="Fiat">Fiat</option>\n          <option value="Ford">Ford</option>\n          <option value="Honda">Honda</option>\n          <option value="Hyundai">Hyundai</option>\n          <option value="Jaguar">Jaguar</option>\n          <option value="Kia">Kia</option>\n          <option value="Mazda">Mazda</option>\n          <option value="Mersedes">Mersedes</option>\n          <option value="Mini">Mini</option>\n          <option value="Mitsubishi">Mitsubishi</option>\n          <option value="Peugeot">Peugeot</option>\n          <option value="Pontiac">Pontiac</option>\n          <option value="Porsche">Porsche</option>\n          <option value="Suzuki">Suzuki</option>\n          <option value="Tesla">Tesla</option>\n          <option value="Volkswagen">Volkswagen</option>\n          <option value="Volvo">Volvo</option>\n        </select>\n        <input class="create-car__name" type="text" maxlength="20">\n        <input class="input-color create-car__color" type="color" value="#65b6cb">\n        <button class="btn update-btn">update</button>\n      </div>\n    </div>\n    <div class="car__settings-right">\n      <button class="btn car__box__stop">■</button>\n      <button class="btn car__box__start">▶</button>\n    </div>\n  </div>\n  <div class="car__path">\n    <div class="car-img"  style="background-color:${t};" >\n    </div>\n    <div class="car__path-line"></div>\n  </div>\n  </div>`},t.createWinnerBox=(e,t,n,i,o,r)=>`\n  <tr data-id="${n}">\n    <td>${r}</td>\n    <td>\n      <div class="car-img"  style="background-color:${t};" >\n    </td>\n    <td>${e}</td>\n    <td>${o}</td>\n    <td>${i}</td>\n  </tr>\n  `}},t={};function n(i){var o=t[i];if(void 0!==o)return o.exports;var r=t[i]={exports:{}};return e[i].call(r.exports,r,r.exports,n),r.exports}n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n(607)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,